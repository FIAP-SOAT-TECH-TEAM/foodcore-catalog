#!/bin/bash

# Script centralizador para o projeto Food Core API
# Uso: ./food [comando] [op√ß√µes]

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPTS_DIR="$SCRIPT_DIR/scripts"
ACT_DIR="$SCRIPT_DIR/docker/act"

# Fun√ß√£o para exibir ajuda
show_help() {
  echo "Food Core API - CLI de gerenciamento"
  echo
  echo "Uso: ./food [comando] [op√ß√µes]"
  echo
  echo "Comandos dispon√≠veis:"
  echo "  start:all        Inicia toda a infraestrutura e a aplica√ß√£o"
  echo "  start:infra      Inicia apenas a infraestrutura (banco)"
  echo "  start:app        Inicia apenas a aplica√ß√£o"
  echo "  stop:all         Para todos os servi√ßos"
  echo "  stop:infra       Para apenas a infraestrutura"
  echo "  stop:app         Para apenas a aplica√ß√£o"
  echo "  restart:all      Reinicia todos os servi√ßos"
  echo "  restart:app      Reinicia apenas a aplica√ß√£o"
  echo "  db:up            Aplica migra√ß√µes do banco de dados"
  echo "  db:reset         Reseta o banco de dados (cuidado!)"
  echo "  run:action       Executa GitHub Actions localmente usando Act"
  echo "  run:workflow     Executa um workflow espec√≠fico do GitHub Actions"
  echo "  test:unit        Executa apenas testes unit√°rios (sem integra√ß√£o)"
  echo "  test:all         Executa todos os testes (unit√°rios + integra√ß√£o)"
  echo "  test:coverage    Executa testes e gera relat√≥rio de cobertura"
  echo "  test:report      Abre o relat√≥rio de cobertura no navegador"
  echo "  sonar:analyze    Executa an√°lise do SonarQube (requer token)"
  echo "  sonar:cloud      Executa an√°lise para o SonarCloud"
  echo "  logs             Exibe logs dos containers"
  echo "  logs:app         Exibe logs apenas da aplica√ß√£o"
  echo "  logs:db          Exibe logs apenas do banco de dados"
  echo "  status           Exibe status dos containers"
  echo "  clean            Remove containers, imagens e volumes n√£o utilizados"
  echo "  help             Exibe esta mensagem de ajuda"
  echo
  echo "Op√ß√µes:"
  echo "  --build, -b      Reconstr√≥i as imagens antes de iniciar"
  echo "  --force, -f      For√ßa a execu√ß√£o sem confirma√ß√£o"
  echo
  echo "Exemplos:"
  echo "  ./food start:all --build    Inicia tudo reconstruindo as imagens"
  echo "  ./food stop:all             Para todos os servi√ßos"
  echo "  ./food db:up                Aplica migra√ß√µes do banco"
  echo "  ./food test:unit            Executa apenas testes unit√°rios"
  echo "  ./food test:all             Executa todos os testes"
  echo "  ./food test:coverage        Executa testes e gera relat√≥rio de cobertura"
  echo "  ./food sonar:analyze        Executa an√°lise do SonarQube local"
  echo "  ./food run:action           Executa todos os GitHub Actions localmente"
  echo "  ./food run:workflow .github/workflows/ci-cd.yml  Executa um workflow espec√≠fico"
}

# Verificar se o Docker est√° rodando
check_docker() {
  docker info &>/dev/null
  return $?
}

if ! check_docker; then
  echo "ERRO: O Docker n√£o est√° rodando."
  echo "Por favor, inicie o Docker Desktop e tente novamente."
  exit 1
fi

# Verificar se o comando foi fornecido
if [ $# -eq 0 ]; then
  show_help
  exit 1
fi

# Processar op√ß√µes
BUILD_FLAG=""
FORCE_FLAG=""

while [[ $# -gt 0 ]]; do
  case $1 in
    --build|-b)
      BUILD_FLAG="--build"
      shift
      ;;
    --force|-f)
      FORCE_FLAG="--force"
      shift
      ;;
    *)
      COMMAND="$1"
      shift
      ;;
  esac
done

# Executar o comando apropriado
case "$COMMAND" in
  start:all)
    echo "Iniciando toda a infraestrutura e aplica√ß√£o..."
    "$SCRIPTS_DIR/infra-up.sh" $FORCE_FLAG
    "$SCRIPTS_DIR/app-up.sh" $BUILD_FLAG
    # Verificar se a rede fastfood-network existe, se n√£o, criar
    if ! docker network ls | grep -q fastfood-network; then
      echo "Criando rede compartilhada fastfood-network..."
      docker network create fastfood-network
    fi
    ;;
  start:infra)
    echo "Iniciando apenas a infraestrutura..."
    "$SCRIPTS_DIR/infra-up.sh" $FORCE_FLAG
    ;;
  start:app)
    echo "Iniciando apenas a aplica√ß√£o..."
    "$SCRIPTS_DIR/app-up.sh" $BUILD_FLAG
    ;;
  stop:all)
    echo "Parando todos os servi√ßos..."
    "$SCRIPTS_DIR/app-down.sh"
    "$SCRIPTS_DIR/infra-down.sh"
    ;;
  stop:infra)
    echo "Parando apenas a infraestrutura..."
    "$SCRIPTS_DIR/infra-down.sh"
    ;;
  stop:app)
    echo "Parando apenas a aplica√ß√£o..."
    "$SCRIPTS_DIR/app-down.sh"
    ;;
  restart:all)
    echo "Reiniciando todos os servi√ßos..."
    "$SCRIPTS_DIR/app-restart.sh" $BUILD_FLAG
    "$SCRIPTS_DIR/infra-restart.sh" $FORCE_FLAG
    ;;
  restart:app)
    echo "Reiniciando apenas a aplica√ß√£o..."
    "$SCRIPTS_DIR/app-restart.sh" $BUILD_FLAG
    ;;
  db:up)
    echo "Aplicando migra√ß√µes do banco de dados..."
    "$SCRIPTS_DIR/apply-migrations.sh"
    ;;
  db:reset)
    if [ "$FORCE_FLAG" != "--force" ]; then
      read -p "ATEN√á√ÉO: Isso ir√° resetar o banco de dados. Tem certeza? (s/n): " resposta
      if [[ ! "$resposta" =~ ^[Ss]$ ]]; then
        echo "Opera√ß√£o cancelada."
        exit 0
      fi
    fi
    echo "Resetando o banco de dados..."
    "$SCRIPTS_DIR/reset-db.sh"
    ;;
  run:action)
    echo "Executando GitHub Actions localmente..."
    # Verificar se o Act est√° instalado
    if ! command -v act &> /dev/null; then
      echo "ERRO: Act n√£o est√° instalado."
      echo "Instale-o seguindo as instru√ß√µes em: https://github.com/nektos/act"
      exit 1
    fi
    
    # Verificar se h√° arquivo de secrets
    if [ -f "$ACT_DIR/secrets.env" ]; then
      echo "Usando secrets do arquivo $ACT_DIR/secrets.env"
      act --secret-file "$ACT_DIR/secrets.env" "$@"
    else
      echo "Arquivo de secrets n√£o encontrado. Usando configura√ß√£o padr√£o."
      echo "Para configurar secrets, crie um arquivo em $ACT_DIR/secrets.env"
      act "$@"
    fi
    ;;
  run:workflow)
    echo "Executando workflow espec√≠fico do GitHub Actions..."
    # Verificar se o Act est√° instalado
    if ! command -v act &> /dev/null; then
      echo "ERRO: Act n√£o est√° instalado."
      echo "Instale-o seguindo as instru√ß√µes em: https://github.com/nektos/act"
      exit 1
    fi
    
    # Verificar se o workflow foi especificado
    if [ -z "$1" ]; then
      echo "ERRO: Especifique o workflow a ser executado."
      echo "Exemplo: ./food run:workflow .github/workflows/ci-cd.yml"
      exit 1
    fi
    
    # Verificar se h√° arquivo de secrets
    if [ -f "$ACT_DIR/secrets.env" ]; then
      echo "Usando secrets do arquivo $ACT_DIR/secrets.env"
      act workflow_dispatch -W "$1" --secret-file "$ACT_DIR/secrets.env" "${@:2}"
    else
      echo "Arquivo de secrets n√£o encontrado. Usando configura√ß√£o padr√£o."
      echo "Para configurar secrets, crie um arquivo em $ACT_DIR/secrets.env"
      act workflow_dispatch -W "$1" "${@:2}"
          fi
      ;;
  test:unit)
    echo "Executando apenas testes unit√°rios (sem integra√ß√£o)..."
    ./gradlew clean test --tests "*.unit.*" -Dspring.profiles.active=test
    ;;
  test:all)
    echo "Executando todos os testes (unit√°rios + integra√ß√£o)..."
    ./gradlew clean test -Dspring.profiles.active=test
    ;;
  test:coverage)
    echo "Executando testes e gerando relat√≥rio de cobertura..."
    ./gradlew clean test jacocoTestReport -Dspring.profiles.active=test
    echo ""
    echo "‚úÖ Relat√≥rio de cobertura gerado!"
    echo "üìä Abra o arquivo: build/reports/jacoco/test/html/index.html"
    echo "üìà Ou execute: ./food test:report"
    ;;
  test:report)
    echo "Abrindo relat√≥rio de cobertura no navegador..."
    if [ -f "build/reports/jacoco/test/html/index.html" ]; then
      if command -v open &> /dev/null; then
        # macOS
        open build/reports/jacoco/test/html/index.html
      elif command -v xdg-open &> /dev/null; then
        # Linux
        xdg-open build/reports/jacoco/test/html/index.html
      elif command -v start &> /dev/null; then
        # Windows
        start build/reports/jacoco/test/html/index.html
      else
        echo "N√£o foi poss√≠vel abrir automaticamente. Abra manualmente:"
        echo "build/reports/jacoco/test/html/index.html"
      fi
    else
      echo "‚ùå Relat√≥rio de cobertura n√£o encontrado!"
      echo "Execute primeiro: ./food test:coverage"
    fi
    ;;
  sonar:analyze)
    echo "Executando an√°lise do SonarQube..."
    if [ -z "$SONAR_TOKEN" ]; then
      echo "‚ö†Ô∏è  Vari√°vel SONAR_TOKEN n√£o definida."
      echo "üí° Para usar SonarQube local:"
      echo "   1. Inicie o SonarQube: docker run -d --name sonarqube -p 9000:9000 sonarqube:lts"
      echo "   2. Acesse http://localhost:9000 (admin/admin)"
      echo "   3. Crie um token e defina: export SONAR_TOKEN=seu-token"
      echo ""
      echo "üöÄ Executando sem token (pode falhar se SonarQube exigir autentica√ß√£o)..."
    fi
    ./gradlew clean test jacocoTestReport sonar -Dspring.profiles.active=test
    ;;
  sonar:cloud)
    echo "Executando an√°lise para o SonarCloud..."
    if [ -z "$SONAR_TOKEN" ]; then
      echo "‚ùå Vari√°vel SONAR_TOKEN √© obrigat√≥ria para SonarCloud!"
      echo "üí° Configure o token:"
      echo "   1. Acesse https://sonarcloud.io/account/security/"
      echo "   2. Gere um token"
      echo "   3. Defina: export SONAR_TOKEN=seu-token"
      echo "   4. Configure a organiza√ß√£o no build.gradle"
      exit 1
    fi
    echo "üîç Analisando c√≥digo para o SonarCloud..."
    ./gradlew clean test jacocoTestReport sonar \
      -Dspring.profiles.active=test \
      -Dsonar.host.url=https://sonarcloud.io \
      -Dsonar.organization=${SONAR_ORGANIZATION:-"your-org"}
    ;;
  logs)
    echo "Exibindo logs de todos os containers..."
    cd "$SCRIPT_DIR/docker" && docker-compose logs -f
    ;;
  logs:app)
    echo "Exibindo logs da aplica√ß√£o..."
    cd "$SCRIPT_DIR/docker" && docker-compose logs -f app
    ;;
  logs:db)
    echo "Exibindo logs do banco de dados..."
    cd "$SCRIPT_DIR/docker" && docker-compose logs -f db
    ;;
  status)
    echo "Status dos containers:"
    cd "$SCRIPT_DIR/docker" && docker-compose ps
    ;;
  clean)
    if [ "$FORCE_FLAG" != "--force" ]; then
      read -p "ATEN√á√ÉO: Isso ir√° remover containers, imagens e volumes n√£o utilizados. Tem certeza? (s/n): " resposta
      if [[ ! "$resposta" =~ ^[Ss]$ ]]; then
        echo "Opera√ß√£o cancelada."
        exit 0
      fi
    fi
    echo "Limpando recursos Docker n√£o utilizados..."
    docker system prune -a --volumes
    ;;
  help)
    show_help
    ;;
  *)
    echo "ERRO: Comando desconhecido: $COMMAND"
    echo "Use './food help' para ver os comandos dispon√≠veis."
    exit 1
    ;;
esac 